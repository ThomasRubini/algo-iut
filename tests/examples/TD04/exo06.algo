fonction saisirEntierSupX  (invite : in string, msgErr : in string, x : in entier_naturel) renvoie entier_naturel
debut
	declarer n : entier_naturel;
	boucle
		afficher (invite);
		saisir(n);
		si (n > x) sortie;
		fsi
		afficher (msgErr);
		ligne_suivante;
	fboucle	
	renvoie n;
fin

fonction find (val : in entier, tabInt : in tableau_de entier) renvoie entier_naturel
debut
	allonger (tabInt, 1);
	tabInt [taille (tabInt) - 1] <- val;

	declarer pos : entier_naturel;
	pos <- 0;
	tant_que (tabInt[pos] ne_vaut_pas val)
	faire
		pos <- pos + 1;
	ffaire
	renvoie pos;
fin

procedure afficheTabInt (tabInt : in tableau_de entier, sep : in caractere, nbParLigne : in entier_naturel)
debut
	
	//cpt designe le nombre d'affichage déjà effectué
	declarer cpt :entier_naturel;
	cpt <- 0;

	pour (i variant_de 0 a taille(tabInt) - 1)
	faire

		afficher (tabInt [i]);
		cpt <- cpt + 1;
		si (modulo (cpt, nbParLigne) vaut 0)
			ligne_suivante;
		sinon
			afficher (sep);	
		fsi	
	ffaire
fin



procedure genereTabInt (tabInt : in_out tableau_de entier, m : in entier)
debut
	declarer nb : entier_naturel;
	nb <- 0;
	tant_que (nb < taille (tabInt))
	faire
		declarer alea : entier_naturel;
		alea <- rand (1, m);
		declarer pos : entier_naturel;
		pos <- 0;
		tant_que (pos < nb ET_ALORS tabInt[pos] ne_vaut_pas alea)
		faire
			pos <- pos + 1;
		ffaire
		si (pos vaut nb)
			tabInt [nb] <- alea;
			nb <- nb + 1;
		fsi	
	ffaire
fin

algorithme testDeGenereTabInt
debut
	declarer n : entier_naturel;
	afficher ("entrer la taille du tableau : ");
	saisir (n);

	declarer tabInts : tableau_de n entier;

	declarer m : entier_naturel;
	m <- saisirEntierSupX ("entrer la valeur maximale du tableau : ", "Plus grand que la taille du tableau svp ...", n);

	genereTabInt (tabInts, m);

	afficheTabInt (tabInts, '\t', 10);
	ligne_suivante;
fin